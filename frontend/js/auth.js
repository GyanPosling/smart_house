// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
document.getElementById('registerForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;

    try {
        submitBtn.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...';
        submitBtn.disabled = true;

        const userData = {
            name: document.getElementById('regUsername').value,
            email: document.getElementById('regEmail').value,
            password: document.getElementById('regPassword').value
        };

        const response = await fetch(`${API_BASE}/auth/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(userData)
        });

        if (response.ok) {
            alert('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
            showLogin();
            document.getElementById('registerForm').reset();
        } else {
            const error = await response.text();
            alert('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error);
        }
    } catch (error) {
        alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
    } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
});

// –í—Ö–æ–¥
document.getElementById('loginForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;

    try {
        submitBtn.textContent = '–í—Ö–æ–¥...';
        submitBtn.disabled = true;

        const loginData = {
            name: document.getElementById('loginUsername').value,
            password: document.getElementById('loginPassword').value
        };

        const response = await fetch(`${API_BASE}/auth/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(loginData)
        });

        if (response.ok) {
            token = await response.text();
            localStorage.setItem('token', token);
            localStorage.setItem('username', loginData.name);
            await showMainPage();
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
    } catch (error) {
        alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
    } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
async function showMainPage() {
    hideAllPages();
    document.getElementById('mainPage').classList.remove('hidden');

    try {
        await loadUserData();
        await loadDevices();
        await loadSensors();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (updateInterval) clearInterval(updateInterval);
        updateInterval = setInterval(updateData, 5000);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function updateData() {
    try {
        await loadSensors();
        await loadDevices();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData() {
    const username = localStorage.getItem('username') || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    currentUser = {
        name: username,
        devicesCount: 0,
        lastLogin: new Date().toLocaleDateString('ru-RU')
    };
    document.getElementById('userWelcome').textContent = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${currentUser.name}!`;
}

// –í—ã—Ö–æ–¥
function logout() {
    localStorage.removeItem('token');
    localStorage.removeItem('username');
    token = null;
    currentUser = null;

    if (updateInterval) {
        clearInterval(updateInterval);
        updateInterval = null;
    }

    showRegister();
    alert('üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
}