async function loadSensors() {
    if (!smartHomeId) return;
    try {
        const sensors = await apiCall(`/smarthome/${smartHomeId}/sensors`);
        displaySensors(sensors);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤:', error);
        document.getElementById('sensorsData').innerHTML =
            '<div class="error-message">‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤</div>';
    }
}

function displaySensors(sensors) {
    const sensorsData = document.getElementById('sensorsData');

    if (sensors.length === 0) {
        sensorsData.innerHTML = '<div class="empty-state">üö´ –î–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</div>';
        return;
    }

    sensorsData.innerHTML = sensors.map(sensor => {
        const status = getSensorStatus(sensor);
        const value = sensor.value.toFixed(1);
        const unit = getSensorUnit(sensor.type);

        return `
            <div class="sensor-value ${status}">
                <strong>${getSensorTypeName(sensor.type)}</strong>
                <div class="value">${value} ${unit}</div>
                <small>üìç ${sensor.location}</small>
                <small>${getStatusMessage(sensor.type, value, status)}</small>
            </div>
        `;
    }).join('');
}

function getSensorTypeName(type) {
    const names = {
        'TEMPERATURE': 'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        'HUMIDITY': 'üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å',
        'CO2': 'üí® CO‚ÇÇ',
        'NOISE': 'üì¢ –®—É–º'
    };
    return names[type] || type;
}

function getStatusMessage(type, value, status) {
    const messages = {
        'TEMPERATURE': {
            'good': '‚úÖ –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            'warning': '‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–ª–∏–∑–∫–∞ –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–∞',
            'danger': '‚ùå –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–µ –∑–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞'
        },
        'HUMIDITY': {
            'good': '‚úÖ –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å',
            'warning': '‚ö†Ô∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å –±–ª–∏–∑–∫–∞ –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–∞',
            'danger': '‚ùå –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–Ω–µ –∑–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞'
        },
        'CO2': {
            'good': '‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞',
            'warning': '‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ —É—Ö—É–¥—à–∞–µ—Ç—Å—è',
            'danger': '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ'
        },
        'NOISE': {
            'good': '‚úÖ –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –≤ –Ω–æ—Ä–º–µ',
            'warning': '‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞',
            'danger': '‚ùå –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞'
        }
    };

    return messages[type]?.[status] || 'üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã';
}

function showProfile() {
    const profileInfo = document.getElementById('profileInfo');

    if (!currentUser) {
        profileInfo.innerHTML = '<p>‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
    } else {
        profileInfo.innerHTML = `
            <p><strong>üè† –ò–º—è –¥–æ–º–∞:</strong> ${currentUser.smartHomeName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
            <p><strong>üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> ${currentUser.name}</p>
            <p><strong>üì± –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</strong> ${currentUser.devicesCount || 0}</p>
            <p><strong>üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</strong> ${currentUser.lastLogin || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
            <p><strong>üè† –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</strong> <span style="color: #28a745;">‚úÖ –ê–∫—Ç–∏–≤–Ω–∞</span></p>
            <p><strong>üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</strong> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ–∫–ª–∏–º–∞—Ç–æ–º</p>
        `;
    }
    document.getElementById('profileModal').classList.remove('hidden');
}

function hideProfileModal() {
    document.getElementById('profileModal').classList.add('hidden');
}