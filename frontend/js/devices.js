async function loadDevices() {
    if (!smartHomeId) return;
    try {
        const devices = await apiCall(`/smarthome/${smartHomeId}/devices`);
        displayDevices(devices);
        if (currentUser) {
            currentUser.devicesCount = devices.length;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
        document.getElementById('devicesList').innerHTML =
            '<div class="error-message">‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</div>';
    }
}

function displayDevices(devices) {
    const devicesList = document.getElementById('devicesList');

    if (devices.length === 0) {
        devicesList.innerHTML = `
            <div class="empty-state">
                <h3>üö´ –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ–∫–ª–∏–º–∞—Ç–æ–º</p>
                <button class="btn btn-primary" onclick="showAddDeviceModal()">–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</button>
            </div>
        `;
        return;
    }

    devicesList.innerHTML = devices.map(device => `
        <div class="device-card ${device.status === 'ON' ? 'on' : 'off'} ${device.mode === 'AUTO' ? 'auto' : ''}" 
             onclick="showDeviceDetail(${device.id})">
            <div class="device-header">
                <div class="device-title">${device.name}</div>
                <span class="device-status ${device.status === 'ON' ? 'status-on' : 'status-off'}">
                    ${device.status === 'ON' ? '–í–ö–õ' : '–í–´–ö–õ'}
                </span>
            </div>
            <div class="device-body">
                <div class="device-icon">${getDeviceIcon(device.type)}</div>
                <div class="device-info">
                    <small>üìç ${device.location}</small>
                    <small class="mode-tag">${device.mode === 'AUTO' ? '–ê–≤—Ç–æ' : '–†—É—á–Ω–æ–π'}</small>
                </div>
            </div>
        </div>
    `).join('');
}

async function showDeviceDetail(deviceId) {
    try {
        const device = await apiCall(`/smarthome/${smartHomeId}/devices/${deviceId}`);
        const detailDiv = document.getElementById('deviceDetailInfo');

        detailDiv.innerHTML = `
            <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${device.name}</p>
            <p><strong>–¢–∏–ø:</strong> ${getDeviceTypeName(device.type)}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="device-status ${device.status === 'ON' ? 'status-on' : 'status-off'}">${device.status}</span></p>
            <p><strong>–†–µ–∂–∏–º:</strong> ${device.mode === 'AUTO' ? '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π' : '–†—É—á–Ω–æ–π'}</p>
            <p><strong>–£—Ä–æ–≤–µ–Ω—å –º–æ—â–Ω–æ—Å—Ç–∏:</strong> ${device.powerLevel}%</p>
            <p><strong>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${device.location}</p>
            
            ${device.supportsTemperatureControl ?
            `<p><strong>–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø.:</strong> ${device.currentTemperature || '?'}¬∞C</p>
                 <p><strong>–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø.:</strong> ${device.targetTemperature || '?'}¬∞C</p>`
            : ''}
            
            ${device.supportsHumidityControl ?
            `<p><strong>–¢–µ–∫—É—â–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å:</strong> ${device.currentHumidity || '?'}%</p>
                 <p><strong>–¶–µ–ª–µ–≤–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å:</strong> ${device.targetHumidity || '?'}%</p>`
            : ''}

            <div class="detail-actions">
                ${device.status === 'OFF' ?
            `<button class="btn btn-success" onclick="toggleDeviceStatus(${device.id}, 'ON')">–í–ö–õ–Æ–ß–ò–¢–¨</button>` :
            `<button class="btn btn-danger" onclick="toggleDeviceStatus(${device.id}, 'OFF')">–í–´–ö–õ–Æ–ß–ò–¢–¨</button>`
        }
                <button class="btn btn-info" onclick="setDeviceMode(${device.id}, '${device.mode === 'AUTO' ? 'MANUAL' : 'AUTO'}')">
                    –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ ${device.mode === 'AUTO' ? '–†—É—á–Ω–æ–π' : '–ê–≤—Ç–æ'}
                </button>
                <button class="btn btn-secondary" onclick="deleteDevice(${device.id})">–£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;

        document.getElementById('deviceDetailModal').classList.remove('hidden');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', 'error');
    }
}

async function toggleDeviceStatus(deviceId, newStatus) {
    try {
        await apiCall(`/smarthome/${smartHomeId}/devices/${deviceId}/${newStatus.toLowerCase()}`, {
            method: 'PUT'
        });
        showNotification(`‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${newStatus === 'ON' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`);
        hideDeviceDetailModal();
        await updateData();
    } catch (error) {
        showNotification('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'error');
    }
}

async function setDeviceMode(deviceId, newMode) {
    try {
        const urlPart = newMode === 'AUTO' ? 'auto' : 'manual';
        await apiCall(`/smarthome/${smartHomeId}/devices/${deviceId}/${urlPart}`, {
            method: 'PUT'
        });
        showNotification(`‚úÖ –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newMode === 'AUTO' ? '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π' : '–†—É—á–Ω–æ–π'}`);
        hideDeviceDetailModal();
        await updateData();
    } catch (error) {
        showNotification('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞', 'error');
    }
}

async function deleteDevice(deviceId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?')) return;
    try {
        await apiCall(`/smarthome/${smartHomeId}/devices/${deviceId}`, {
            method: 'DELETE'
        });
        showNotification('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ');
        hideDeviceDetailModal();
        await loadDevices();
    } catch (error) {
        showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', 'error');
    }
}

function getDeviceIcon(type) {
    switch (type) {
        case 'HEATER': return 'üî•';
        case 'AIR_CONDITIONER': return '‚ùÑÔ∏è';
        case 'HUMIDIFIER': return 'üíß';
        case 'DEHUMIDIFIER': return 'üå¨Ô∏è';
        case 'VENTILATOR': return 'üí®';
        default: return 'üîå';
    }
}

function getDeviceTypeName(type) {
    switch (type) {
        case 'HEATER': return '–û–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å';
        case 'AIR_CONDITIONER': return '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä';
        case 'HUMIDIFIER': return '–£–≤–ª–∞–∂–Ω–∏—Ç–µ–ª—å';
        case 'DEHUMIDIFIER': return '–û—Å—É—à–∏—Ç–µ–ª—å';
        case 'VENTILATOR': return '–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä';
        default: return '–î—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    }
}

document.getElementById('addDeviceForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;

    try {
        submitBtn.textContent = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...';
        submitBtn.disabled = true;

        const deviceData = {
            name: document.getElementById('deviceName').value,
            location: "–ì–æ—Å—Ç–∏–Ω–∞—è",
            type: document.getElementById('deviceType').value,
            status: 'OFF',
            mode: 'AUTO',
            powerLevel: 0,
            isConnected: true
        };

        await apiCall(`/smarthome/${smartHomeId}/devices`, {
            method: 'POST',
            body: JSON.stringify(deviceData)
        });

        hideAddDeviceModal();
        await loadDevices();
        document.getElementById('addDeviceForm').reset();
        showNotification('‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', 'error');
    } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
});

function showAddDeviceModal() {
    document.getElementById('addDeviceModal').classList.remove('hidden');
}

function hideAddDeviceModal() {
    document.getElementById('addDeviceModal').classList.add('hidden');
    document.getElementById('addDeviceForm').reset();
}

function hideDeviceDetailModal() {
    document.getElementById('deviceDetailModal').classList.add('hidden');
}

function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#28a745' : '#dc3545'};
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        z-index: 1001;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: opacity 0.3s ease-in-out;
    `;
    document.body.appendChild(notification);

    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 300);
    }, 4000);
}